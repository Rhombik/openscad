// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NodeTaskProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NodeTaskProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace NodeTaskProto {

void protobuf_ShutdownFile_NodeTaskProto_2eproto() {
  delete NodeTaskMsg::default_instance_;
  delete CGALTaskDetails::default_instance_;
  delete TransformTaskDetails::default_instance_;
  delete PolySetTaskDetails::default_instance_;
  delete HullTaskDetails::default_instance_;
  delete Polyhedron::default_instance_;
  delete PolySet::default_instance_;
  delete Polygon::default_instance_;
  delete Vector::default_instance_;
  delete Matrix::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_NodeTaskProto_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_NodeTaskProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NodeTaskMsg::default_instance_ = new NodeTaskMsg();
  CGALTaskDetails::default_instance_ = new CGALTaskDetails();
  TransformTaskDetails::default_instance_ = new TransformTaskDetails();
  PolySetTaskDetails::default_instance_ = new PolySetTaskDetails();
  HullTaskDetails::default_instance_ = new HullTaskDetails();
  Polyhedron::default_instance_ = new Polyhedron();
  PolySet::default_instance_ = new PolySet();
  Polygon::default_instance_ = new Polygon();
  Vector::default_instance_ = new Vector();
  Matrix::default_instance_ = new Matrix();
  NodeTaskMsg::default_instance_->InitAsDefaultInstance();
  CGALTaskDetails::default_instance_->InitAsDefaultInstance();
  TransformTaskDetails::default_instance_->InitAsDefaultInstance();
  PolySetTaskDetails::default_instance_->InitAsDefaultInstance();
  HullTaskDetails::default_instance_->InitAsDefaultInstance();
  Polyhedron::default_instance_->InitAsDefaultInstance();
  PolySet::default_instance_->InitAsDefaultInstance();
  Polygon::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  Matrix::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NodeTaskProto_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_NodeTaskProto_2eproto_once_);
void protobuf_AddDesc_NodeTaskProto_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_NodeTaskProto_2eproto_once_,
                 &protobuf_AddDesc_NodeTaskProto_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NodeTaskProto_2eproto {
  StaticDescriptorInitializer_NodeTaskProto_2eproto() {
    protobuf_AddDesc_NodeTaskProto_2eproto();
  }
} static_descriptor_initializer_NodeTaskProto_2eproto_;
#endif

// ===================================================================

bool NodeTaskMsg_NodeTaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NodeTaskMsg_NodeTaskType NodeTaskMsg::CGALTask;
const NodeTaskMsg_NodeTaskType NodeTaskMsg::TransformTask;
const NodeTaskMsg_NodeTaskType NodeTaskMsg::PolySetTask;
const NodeTaskMsg_NodeTaskType NodeTaskMsg::HullTask;
const NodeTaskMsg_NodeTaskType NodeTaskMsg::NodeTaskType_MIN;
const NodeTaskMsg_NodeTaskType NodeTaskMsg::NodeTaskType_MAX;
const int NodeTaskMsg::NodeTaskType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NodeTaskMsg::kTypeFieldNumber;
const int NodeTaskMsg::kIdFieldNumber;
const int NodeTaskMsg::kCgalTaskDetailsFieldNumber;
const int NodeTaskMsg::kTransformTaskDetailsFieldNumber;
const int NodeTaskMsg::kPolySetTaskDetailsFieldNumber;
const int NodeTaskMsg::kHullTaskDetailsFieldNumber;
#endif  // !_MSC_VER

NodeTaskMsg::NodeTaskMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NodeTaskMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cgaltaskdetails_ = const_cast< ::NodeTaskProto::CGALTaskDetails*>(
      ::NodeTaskProto::CGALTaskDetails::internal_default_instance());
#else
  cgaltaskdetails_ = const_cast< ::NodeTaskProto::CGALTaskDetails*>(&::NodeTaskProto::CGALTaskDetails::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  transformtaskdetails_ = const_cast< ::NodeTaskProto::TransformTaskDetails*>(
      ::NodeTaskProto::TransformTaskDetails::internal_default_instance());
#else
  transformtaskdetails_ = const_cast< ::NodeTaskProto::TransformTaskDetails*>(&::NodeTaskProto::TransformTaskDetails::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  polysettaskdetails_ = const_cast< ::NodeTaskProto::PolySetTaskDetails*>(
      ::NodeTaskProto::PolySetTaskDetails::internal_default_instance());
#else
  polysettaskdetails_ = const_cast< ::NodeTaskProto::PolySetTaskDetails*>(&::NodeTaskProto::PolySetTaskDetails::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hulltaskdetails_ = const_cast< ::NodeTaskProto::HullTaskDetails*>(
      ::NodeTaskProto::HullTaskDetails::internal_default_instance());
#else
  hulltaskdetails_ = const_cast< ::NodeTaskProto::HullTaskDetails*>(&::NodeTaskProto::HullTaskDetails::default_instance());
#endif
}

NodeTaskMsg::NodeTaskMsg(const NodeTaskMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NodeTaskMsg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0u;
  cgaltaskdetails_ = NULL;
  transformtaskdetails_ = NULL;
  polysettaskdetails_ = NULL;
  hulltaskdetails_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeTaskMsg::~NodeTaskMsg() {
  SharedDtor();
}

void NodeTaskMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete cgaltaskdetails_;
    delete transformtaskdetails_;
    delete polysettaskdetails_;
    delete hulltaskdetails_;
  }
}

void NodeTaskMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeTaskMsg& NodeTaskMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

NodeTaskMsg* NodeTaskMsg::default_instance_ = NULL;

NodeTaskMsg* NodeTaskMsg::New() const {
  return new NodeTaskMsg;
}

void NodeTaskMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0u;
    if (has_cgaltaskdetails()) {
      if (cgaltaskdetails_ != NULL) cgaltaskdetails_->::NodeTaskProto::CGALTaskDetails::Clear();
    }
    if (has_transformtaskdetails()) {
      if (transformtaskdetails_ != NULL) transformtaskdetails_->::NodeTaskProto::TransformTaskDetails::Clear();
    }
    if (has_polysettaskdetails()) {
      if (polysettaskdetails_ != NULL) polysettaskdetails_->::NodeTaskProto::PolySetTaskDetails::Clear();
    }
    if (has_hulltaskdetails()) {
      if (hulltaskdetails_ != NULL) hulltaskdetails_->::NodeTaskProto::HullTaskDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NodeTaskMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeTaskProto.NodeTaskMsg.NodeTaskType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeTaskProto::NodeTaskMsg_NodeTaskType_IsValid(value)) {
            set_type(static_cast< ::NodeTaskProto::NodeTaskMsg_NodeTaskType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cgalTaskDetails;
        break;
      }

      // optional .NodeTaskProto.CGALTaskDetails cgalTaskDetails = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cgalTaskDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cgaltaskdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_transformTaskDetails;
        break;
      }

      // optional .NodeTaskProto.TransformTaskDetails transformTaskDetails = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transformTaskDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformtaskdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_polySetTaskDetails;
        break;
      }

      // optional .NodeTaskProto.PolySetTaskDetails polySetTaskDetails = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polySetTaskDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polysettaskdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hullTaskDetails;
        break;
      }

      // optional .NodeTaskProto.HullTaskDetails hullTaskDetails = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hullTaskDetails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hulltaskdetails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeTaskMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NodeTaskProto.NodeTaskMsg.NodeTaskType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional .NodeTaskProto.CGALTaskDetails cgalTaskDetails = 3;
  if (has_cgaltaskdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->cgaltaskdetails(), output);
  }

  // optional .NodeTaskProto.TransformTaskDetails transformTaskDetails = 4;
  if (has_transformtaskdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->transformtaskdetails(), output);
  }

  // optional .NodeTaskProto.PolySetTaskDetails polySetTaskDetails = 5;
  if (has_polysettaskdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->polysettaskdetails(), output);
  }

  // optional .NodeTaskProto.HullTaskDetails hullTaskDetails = 6;
  if (has_hulltaskdetails()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->hulltaskdetails(), output);
  }

}

int NodeTaskMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeTaskProto.NodeTaskMsg.NodeTaskType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .NodeTaskProto.CGALTaskDetails cgalTaskDetails = 3;
    if (has_cgaltaskdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cgaltaskdetails());
    }

    // optional .NodeTaskProto.TransformTaskDetails transformTaskDetails = 4;
    if (has_transformtaskdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformtaskdetails());
    }

    // optional .NodeTaskProto.PolySetTaskDetails polySetTaskDetails = 5;
    if (has_polysettaskdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polysettaskdetails());
    }

    // optional .NodeTaskProto.HullTaskDetails hullTaskDetails = 6;
    if (has_hulltaskdetails()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hulltaskdetails());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeTaskMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeTaskMsg*>(&from));
}

void NodeTaskMsg::MergeFrom(const NodeTaskMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cgaltaskdetails()) {
      mutable_cgaltaskdetails()->::NodeTaskProto::CGALTaskDetails::MergeFrom(from.cgaltaskdetails());
    }
    if (from.has_transformtaskdetails()) {
      mutable_transformtaskdetails()->::NodeTaskProto::TransformTaskDetails::MergeFrom(from.transformtaskdetails());
    }
    if (from.has_polysettaskdetails()) {
      mutable_polysettaskdetails()->::NodeTaskProto::PolySetTaskDetails::MergeFrom(from.polysettaskdetails());
    }
    if (from.has_hulltaskdetails()) {
      mutable_hulltaskdetails()->::NodeTaskProto::HullTaskDetails::MergeFrom(from.hulltaskdetails());
    }
  }
}

void NodeTaskMsg::CopyFrom(const NodeTaskMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeTaskMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_cgaltaskdetails()) {
    if (!this->cgaltaskdetails().IsInitialized()) return false;
  }
  if (has_transformtaskdetails()) {
    if (!this->transformtaskdetails().IsInitialized()) return false;
  }
  if (has_polysettaskdetails()) {
    if (!this->polysettaskdetails().IsInitialized()) return false;
  }
  if (has_hulltaskdetails()) {
    if (!this->hulltaskdetails().IsInitialized()) return false;
  }
  return true;
}

void NodeTaskMsg::Swap(NodeTaskMsg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(cgaltaskdetails_, other->cgaltaskdetails_);
    std::swap(transformtaskdetails_, other->transformtaskdetails_);
    std::swap(polysettaskdetails_, other->polysettaskdetails_);
    std::swap(hulltaskdetails_, other->hulltaskdetails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NodeTaskMsg::GetTypeName() const {
  return "NodeTaskProto.NodeTaskMsg";
}


// ===================================================================

bool CGALTaskDetails_OpType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CGALTaskDetails_OpType CGALTaskDetails::CGE_UNION;
const CGALTaskDetails_OpType CGALTaskDetails::CGE_INTERSECTION;
const CGALTaskDetails_OpType CGALTaskDetails::CGE_DIFFERENCE;
const CGALTaskDetails_OpType CGALTaskDetails::CGE_MINKOWSKI;
const CGALTaskDetails_OpType CGALTaskDetails::OpType_MIN;
const CGALTaskDetails_OpType CGALTaskDetails::OpType_MAX;
const int CGALTaskDetails::OpType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CGALTaskDetails::kOpFieldNumber;
const int CGALTaskDetails::kPolyhedronsFieldNumber;
#endif  // !_MSC_VER

CGALTaskDetails::CGALTaskDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CGALTaskDetails::InitAsDefaultInstance() {
}

CGALTaskDetails::CGALTaskDetails(const CGALTaskDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CGALTaskDetails::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGALTaskDetails::~CGALTaskDetails() {
  SharedDtor();
}

void CGALTaskDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CGALTaskDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CGALTaskDetails& CGALTaskDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

CGALTaskDetails* CGALTaskDetails::default_instance_ = NULL;

CGALTaskDetails* CGALTaskDetails::New() const {
  return new CGALTaskDetails;
}

void CGALTaskDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
  }
  polyhedrons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CGALTaskDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeTaskProto.CGALTaskDetails.OpType op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeTaskProto::CGALTaskDetails_OpType_IsValid(value)) {
            set_op(static_cast< ::NodeTaskProto::CGALTaskDetails_OpType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_polyhedrons;
        break;
      }

      // repeated .NodeTaskProto.Polyhedron polyhedrons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polyhedrons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polyhedrons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_polyhedrons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGALTaskDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NodeTaskProto.CGALTaskDetails.OpType op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->op(), output);
  }

  // repeated .NodeTaskProto.Polyhedron polyhedrons = 2;
  for (int i = 0; i < this->polyhedrons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->polyhedrons(i), output);
  }

}

int CGALTaskDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeTaskProto.CGALTaskDetails.OpType op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

  }
  // repeated .NodeTaskProto.Polyhedron polyhedrons = 2;
  total_size += 1 * this->polyhedrons_size();
  for (int i = 0; i < this->polyhedrons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polyhedrons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGALTaskDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CGALTaskDetails*>(&from));
}

void CGALTaskDetails::MergeFrom(const CGALTaskDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  polyhedrons_.MergeFrom(from.polyhedrons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
  }
}

void CGALTaskDetails::CopyFrom(const CGALTaskDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGALTaskDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < polyhedrons_size(); i++) {
    if (!this->polyhedrons(i).IsInitialized()) return false;
  }
  return true;
}

void CGALTaskDetails::Swap(CGALTaskDetails* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    polyhedrons_.Swap(&other->polyhedrons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CGALTaskDetails::GetTypeName() const {
  return "NodeTaskProto.CGALTaskDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int TransformTaskDetails::kMatrixFieldNumber;
const int TransformTaskDetails::kPolyhedronsFieldNumber;
#endif  // !_MSC_VER

TransformTaskDetails::TransformTaskDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TransformTaskDetails::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  matrix_ = const_cast< ::NodeTaskProto::Matrix*>(
      ::NodeTaskProto::Matrix::internal_default_instance());
#else
  matrix_ = const_cast< ::NodeTaskProto::Matrix*>(&::NodeTaskProto::Matrix::default_instance());
#endif
}

TransformTaskDetails::TransformTaskDetails(const TransformTaskDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TransformTaskDetails::SharedCtor() {
  _cached_size_ = 0;
  matrix_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformTaskDetails::~TransformTaskDetails() {
  SharedDtor();
}

void TransformTaskDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete matrix_;
  }
}

void TransformTaskDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TransformTaskDetails& TransformTaskDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

TransformTaskDetails* TransformTaskDetails::default_instance_ = NULL;

TransformTaskDetails* TransformTaskDetails::New() const {
  return new TransformTaskDetails;
}

void TransformTaskDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_matrix()) {
      if (matrix_ != NULL) matrix_->::NodeTaskProto::Matrix::Clear();
    }
  }
  polyhedrons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TransformTaskDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeTaskProto.Matrix matrix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_polyhedrons;
        break;
      }

      // repeated .NodeTaskProto.Polyhedron polyhedrons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polyhedrons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polyhedrons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_polyhedrons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransformTaskDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NodeTaskProto.Matrix matrix = 1;
  if (has_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->matrix(), output);
  }

  // repeated .NodeTaskProto.Polyhedron polyhedrons = 2;
  for (int i = 0; i < this->polyhedrons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->polyhedrons(i), output);
  }

}

int TransformTaskDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeTaskProto.Matrix matrix = 1;
    if (has_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matrix());
    }

  }
  // repeated .NodeTaskProto.Polyhedron polyhedrons = 2;
  total_size += 1 * this->polyhedrons_size();
  for (int i = 0; i < this->polyhedrons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polyhedrons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformTaskDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TransformTaskDetails*>(&from));
}

void TransformTaskDetails::MergeFrom(const TransformTaskDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  polyhedrons_.MergeFrom(from.polyhedrons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_matrix()) {
      mutable_matrix()->::NodeTaskProto::Matrix::MergeFrom(from.matrix());
    }
  }
}

void TransformTaskDetails::CopyFrom(const TransformTaskDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformTaskDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_matrix()) {
    if (!this->matrix().IsInitialized()) return false;
  }
  for (int i = 0; i < polyhedrons_size(); i++) {
    if (!this->polyhedrons(i).IsInitialized()) return false;
  }
  return true;
}

void TransformTaskDetails::Swap(TransformTaskDetails* other) {
  if (other != this) {
    std::swap(matrix_, other->matrix_);
    polyhedrons_.Swap(&other->polyhedrons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TransformTaskDetails::GetTypeName() const {
  return "NodeTaskProto.TransformTaskDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int PolySetTaskDetails::kPolySetFieldNumber;
#endif  // !_MSC_VER

PolySetTaskDetails::PolySetTaskDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PolySetTaskDetails::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  polyset_ = const_cast< ::NodeTaskProto::PolySet*>(
      ::NodeTaskProto::PolySet::internal_default_instance());
#else
  polyset_ = const_cast< ::NodeTaskProto::PolySet*>(&::NodeTaskProto::PolySet::default_instance());
#endif
}

PolySetTaskDetails::PolySetTaskDetails(const PolySetTaskDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PolySetTaskDetails::SharedCtor() {
  _cached_size_ = 0;
  polyset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolySetTaskDetails::~PolySetTaskDetails() {
  SharedDtor();
}

void PolySetTaskDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete polyset_;
  }
}

void PolySetTaskDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolySetTaskDetails& PolySetTaskDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

PolySetTaskDetails* PolySetTaskDetails::default_instance_ = NULL;

PolySetTaskDetails* PolySetTaskDetails::New() const {
  return new PolySetTaskDetails;
}

void PolySetTaskDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_polyset()) {
      if (polyset_ != NULL) polyset_->::NodeTaskProto::PolySet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PolySetTaskDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeTaskProto.PolySet polySet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polyset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PolySetTaskDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NodeTaskProto.PolySet polySet = 1;
  if (has_polyset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->polyset(), output);
  }

}

int PolySetTaskDetails::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeTaskProto.PolySet polySet = 1;
    if (has_polyset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polyset());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolySetTaskDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolySetTaskDetails*>(&from));
}

void PolySetTaskDetails::MergeFrom(const PolySetTaskDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_polyset()) {
      mutable_polyset()->::NodeTaskProto::PolySet::MergeFrom(from.polyset());
    }
  }
}

void PolySetTaskDetails::CopyFrom(const PolySetTaskDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolySetTaskDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_polyset()) {
    if (!this->polyset().IsInitialized()) return false;
  }
  return true;
}

void PolySetTaskDetails::Swap(PolySetTaskDetails* other) {
  if (other != this) {
    std::swap(polyset_, other->polyset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PolySetTaskDetails::GetTypeName() const {
  return "NodeTaskProto.PolySetTaskDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int HullTaskDetails::kPolyhedronsFieldNumber;
#endif  // !_MSC_VER

HullTaskDetails::HullTaskDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HullTaskDetails::InitAsDefaultInstance() {
}

HullTaskDetails::HullTaskDetails(const HullTaskDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HullTaskDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HullTaskDetails::~HullTaskDetails() {
  SharedDtor();
}

void HullTaskDetails::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HullTaskDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HullTaskDetails& HullTaskDetails::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

HullTaskDetails* HullTaskDetails::default_instance_ = NULL;

HullTaskDetails* HullTaskDetails::New() const {
  return new HullTaskDetails;
}

void HullTaskDetails::Clear() {
  polyhedrons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HullTaskDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeTaskProto.Polyhedron polyhedrons = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polyhedrons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polyhedrons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_polyhedrons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HullTaskDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeTaskProto.Polyhedron polyhedrons = 1;
  for (int i = 0; i < this->polyhedrons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->polyhedrons(i), output);
  }

}

int HullTaskDetails::ByteSize() const {
  int total_size = 0;

  // repeated .NodeTaskProto.Polyhedron polyhedrons = 1;
  total_size += 1 * this->polyhedrons_size();
  for (int i = 0; i < this->polyhedrons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polyhedrons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HullTaskDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HullTaskDetails*>(&from));
}

void HullTaskDetails::MergeFrom(const HullTaskDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  polyhedrons_.MergeFrom(from.polyhedrons_);
}

void HullTaskDetails::CopyFrom(const HullTaskDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HullTaskDetails::IsInitialized() const {

  for (int i = 0; i < polyhedrons_size(); i++) {
    if (!this->polyhedrons(i).IsInitialized()) return false;
  }
  return true;
}

void HullTaskDetails::Swap(HullTaskDetails* other) {
  if (other != this) {
    polyhedrons_.Swap(&other->polyhedrons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HullTaskDetails::GetTypeName() const {
  return "NodeTaskProto.HullTaskDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int Polyhedron::kIs2DFieldNumber;
const int Polyhedron::kStreamFieldNumber;
#endif  // !_MSC_VER

Polyhedron::Polyhedron()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Polyhedron::InitAsDefaultInstance() {
}

Polyhedron::Polyhedron(const Polyhedron& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Polyhedron::SharedCtor() {
  _cached_size_ = 0;
  is2d_ = false;
  stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polyhedron::~Polyhedron() {
  SharedDtor();
}

void Polyhedron::SharedDtor() {
  if (stream_ != &::google::protobuf::internal::kEmptyString) {
    delete stream_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Polyhedron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Polyhedron& Polyhedron::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

Polyhedron* Polyhedron::default_instance_ = NULL;

Polyhedron* Polyhedron::New() const {
  return new Polyhedron;
}

void Polyhedron::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is2d_ = false;
    if (has_stream()) {
      if (stream_ != &::google::protobuf::internal::kEmptyString) {
        stream_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Polyhedron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is2d = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is2d_)));
          set_has_is2d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stream;
        break;
      }

      // required string stream = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Polyhedron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is2d = 1;
  if (has_is2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is2d(), output);
  }

  // required string stream = 2;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stream(), output);
  }

}

int Polyhedron::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is2d = 1;
    if (has_is2d()) {
      total_size += 1 + 1;
    }

    // required string stream = 2;
    if (has_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polyhedron::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Polyhedron*>(&from));
}

void Polyhedron::MergeFrom(const Polyhedron& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is2d()) {
      set_is2d(from.is2d());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
  }
}

void Polyhedron::CopyFrom(const Polyhedron& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polyhedron::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Polyhedron::Swap(Polyhedron* other) {
  if (other != this) {
    std::swap(is2d_, other->is2d_);
    std::swap(stream_, other->stream_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Polyhedron::GetTypeName() const {
  return "NodeTaskProto.Polyhedron";
}


// ===================================================================

#ifndef _MSC_VER
const int PolySet::kIs2DFieldNumber;
const int PolySet::kConvexivityFieldNumber;
const int PolySet::kResolutionFieldNumber;
const int PolySet::kPolygonsFieldNumber;
const int PolySet::kBordersFieldNumber;
#endif  // !_MSC_VER

PolySet::PolySet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PolySet::InitAsDefaultInstance() {
}

PolySet::PolySet(const PolySet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PolySet::SharedCtor() {
  _cached_size_ = 0;
  is2d_ = false;
  convexivity_ = 0;
  resolution_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolySet::~PolySet() {
  SharedDtor();
}

void PolySet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PolySet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PolySet& PolySet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

PolySet* PolySet::default_instance_ = NULL;

PolySet* PolySet::New() const {
  return new PolySet;
}

void PolySet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is2d_ = false;
    convexivity_ = 0;
    resolution_ = 0;
  }
  polygons_.Clear();
  borders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PolySet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is2d = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is2d_)));
          set_has_is2d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_convexivity;
        break;
      }

      // required int32 convexivity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convexivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &convexivity_)));
          set_has_convexivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_resolution;
        break;
      }

      // required double resolution = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resolution_)));
          set_has_resolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polygons;
        break;
      }

      // repeated .NodeTaskProto.Polygon polygons = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polygons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_polygons;
        if (input->ExpectTag(42)) goto parse_borders;
        break;
      }

      // repeated .NodeTaskProto.Polygon borders = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_borders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_borders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_borders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PolySet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool is2d = 1;
  if (has_is2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is2d(), output);
  }

  // required int32 convexivity = 2;
  if (has_convexivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->convexivity(), output);
  }

  // required double resolution = 3;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->resolution(), output);
  }

  // repeated .NodeTaskProto.Polygon polygons = 4;
  for (int i = 0; i < this->polygons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->polygons(i), output);
  }

  // repeated .NodeTaskProto.Polygon borders = 5;
  for (int i = 0; i < this->borders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->borders(i), output);
  }

}

int PolySet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is2d = 1;
    if (has_is2d()) {
      total_size += 1 + 1;
    }

    // required int32 convexivity = 2;
    if (has_convexivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->convexivity());
    }

    // required double resolution = 3;
    if (has_resolution()) {
      total_size += 1 + 8;
    }

  }
  // repeated .NodeTaskProto.Polygon polygons = 4;
  total_size += 1 * this->polygons_size();
  for (int i = 0; i < this->polygons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->polygons(i));
  }

  // repeated .NodeTaskProto.Polygon borders = 5;
  total_size += 1 * this->borders_size();
  for (int i = 0; i < this->borders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->borders(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolySet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PolySet*>(&from));
}

void PolySet::MergeFrom(const PolySet& from) {
  GOOGLE_CHECK_NE(&from, this);
  polygons_.MergeFrom(from.polygons_);
  borders_.MergeFrom(from.borders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is2d()) {
      set_is2d(from.is2d());
    }
    if (from.has_convexivity()) {
      set_convexivity(from.convexivity());
    }
    if (from.has_resolution()) {
      set_resolution(from.resolution());
    }
  }
}

void PolySet::CopyFrom(const PolySet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolySet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PolySet::Swap(PolySet* other) {
  if (other != this) {
    std::swap(is2d_, other->is2d_);
    std::swap(convexivity_, other->convexivity_);
    std::swap(resolution_, other->resolution_);
    polygons_.Swap(&other->polygons_);
    borders_.Swap(&other->borders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PolySet::GetTypeName() const {
  return "NodeTaskProto.PolySet";
}


// ===================================================================

#ifndef _MSC_VER
const int Polygon::kVectorsFieldNumber;
#endif  // !_MSC_VER

Polygon::Polygon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Polygon::InitAsDefaultInstance() {
}

Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polygon::~Polygon() {
  SharedDtor();
}

void Polygon::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Polygon& Polygon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

Polygon* Polygon::default_instance_ = NULL;

Polygon* Polygon::New() const {
  return new Polygon;
}

void Polygon::Clear() {
  vectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeTaskProto.Vector vectors = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vectors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vectors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeTaskProto.Vector vectors = 1;
  for (int i = 0; i < this->vectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->vectors(i), output);
  }

}

int Polygon::ByteSize() const {
  int total_size = 0;

  // repeated .NodeTaskProto.Vector vectors = 1;
  total_size += 1 * this->vectors_size();
  for (int i = 0; i < this->vectors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vectors(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Polygon*>(&from));
}

void Polygon::MergeFrom(const Polygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  vectors_.MergeFrom(from.vectors_);
}

void Polygon::CopyFrom(const Polygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {

  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other != this) {
    vectors_.Swap(&other->vectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Polygon::GetTypeName() const {
  return "NodeTaskProto.Polygon";
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kDataFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  SharedDtor();
}

void Vector::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vector& Vector::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->data(i), output);
  }

}

int Vector::ByteSize() const {
  int total_size = 0;

  // repeated double data = 1;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vector*>(&from));
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {

  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Vector::GetTypeName() const {
  return "NodeTaskProto.Vector";
}


// ===================================================================

#ifndef _MSC_VER
const int Matrix::kRowsFieldNumber;
const int Matrix::kColsFieldNumber;
const int Matrix::kDataFieldNumber;
#endif  // !_MSC_VER

Matrix::Matrix()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Matrix::InitAsDefaultInstance() {
}

Matrix::Matrix(const Matrix& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Matrix::SharedCtor() {
  _cached_size_ = 0;
  rows_ = 0u;
  cols_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Matrix::~Matrix() {
  SharedDtor();
}

void Matrix::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Matrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Matrix& Matrix::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NodeTaskProto_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NodeTaskProto_2eproto();
#endif
  return *default_instance_;
}

Matrix* Matrix::default_instance_ = NULL;

Matrix* Matrix::New() const {
  return new Matrix;
}

void Matrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rows_ = 0u;
    cols_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Matrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rows_)));
          set_has_rows();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cols;
        break;
      }

      // required uint32 cols = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cols_)));
          set_has_cols();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Matrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rows = 1;
  if (has_rows()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rows(), output);
  }

  // required uint32 cols = 2;
  if (has_cols()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cols(), output);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->data(i), output);
  }

}

int Matrix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rows = 1;
    if (has_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rows());
    }

    // required uint32 cols = 2;
    if (has_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cols());
    }

  }
  // repeated double data = 3;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Matrix*>(&from));
}

void Matrix::MergeFrom(const Matrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rows()) {
      set_rows(from.rows());
    }
    if (from.has_cols()) {
      set_cols(from.cols());
    }
  }
}

void Matrix::CopyFrom(const Matrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other != this) {
    std::swap(rows_, other->rows_);
    std::swap(cols_, other->cols_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Matrix::GetTypeName() const {
  return "NodeTaskProto.Matrix";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NodeTaskProto

// @@protoc_insertion_point(global_scope)
